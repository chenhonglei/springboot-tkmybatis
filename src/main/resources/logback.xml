<?xml version="1.0" encoding="UTF-8"?>
<!-- 从高到地低OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则: 根据当前ROOT级别，日志输出时，级别高于root默认的级别时,则会输出 -->
<!-- 每个配置的filter是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter过滤只记录本级别的日志-->

<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<!-- 常用的Pattern变量,大家可打开该pattern进行输出观察 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志名称 -->
    <contextName>know-db-api</contextName>
    <!-- 彩色日志设置 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 定义日志文件 输入位置 -->
    <!-- 建议不要在LogBack的配置中使用相对路径 -->
    <property name="logDir" value="./logs"/>
    <!-- 日志文件名称 -->
    <property name="logName" value="fast_json"/>
    <!-- 日志最大存档数码 -->
    <property name="maxIndex" value="5"/>
    <!-- 日志最大大小 -->
    <property name="fileSize" value="30MB"/>

    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化  encoder默认配置为PartternLayoutEncoder -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <!--彩色日志的应用-->
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 按照固定大小生成日志文件 -->
    <appender name="ROLLINGFILE-SIZE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件输出的文件名-->
        <file>${logDir}/${logName}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>UTF-8</charset><!-- 此处设置字符集 -->
        </encoder>
        <!-- 按照固定窗口模式生成日志文件，当文件大于30MB时，生成新的日志文件。窗口大小是1到5，当保存了5个归档文件后，将覆盖最早的日志。-->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>${logDir}/${logName}.%i.log.zip</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>${maxIndex}</maxIndex>
        </rollingPolicy>
        <!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>${fileSize}</MaxFileSize>
        </triggeringPolicy>
    </appender>

    <!-- sql level -->
    <logger name="java.sql" level="WARN"/>
    <!-- Springframework level -->
    <logger name="org.springframework" level="WARN"/>
    <logger name="com.bai.json.dao" level="DEBUG"/>

    <!-- root级别   DEBUG -->
    <root level="INFO">
        <!-- 控制台输出 -->
        <appender-ref ref="STDOUT"/>
        <!-- 文件输出-按大小  -->
        <appender-ref ref="ROLLINGFILE-SIZE"/>
    </root>
</configuration>
